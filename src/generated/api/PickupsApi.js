/**
 * Purplship Open Source Multi-carrier Shipping API
 *  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services  The **proxy** endpoints are stateless and forwards calls to carriers web services. 
 *
 * OpenAPI spec version: v1-2021.2
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import OperationConfirmation from '../model/OperationConfirmation';
import Pickup from '../model/Pickup';
import PickupCancelData from '../model/PickupCancelData';
import PickupData from '../model/PickupData';
import PickupList from '../model/PickupList';
import PickupUpdateData from '../model/PickupUpdateData';

/**
* Pickups service.
* @module api/PickupsApi
* @version v1-2021.2
*/
export default class PickupsApi {

    /**
    * Constructs a new PickupsApi. 
    * @alias module:api/PickupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the cancel operation.
     * @callback module:api/PickupsApi~cancelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationConfirmation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a pickup
     * Cancel a pickup of one or more shipments.
     * @param {module:api/PickupsApi~cancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationConfirmation}
     */
    cancel(body, id, callback) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationConfirmation;

      return this.apiClient.callApi(
        '/pickups/{id}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the list operation.
     * @callback module:api/PickupsApi~listCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PickupList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List shipment pickups
     * Retrieve all scheduled pickups.
     * @param {Object} opts Optional parameters
     * @param {module:api/PickupsApi~listCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PickupList}
     */
    list(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PickupList;

      return this.apiClient.callApi(
        '/pickups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the retrieve operation.
     * @callback module:api/PickupsApi~retrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pickup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a pickup
     * Retrieve a scheduled pickup.
     * @param {module:api/PickupsApi~retrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pickup}
     */
    retrieve(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Pickup;

      return this.apiClient.callApi(
        '/pickups/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the schedule operation.
     * @callback module:api/PickupsApi~scheduleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Pickup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Schedule a pickup
     * Schedule a pickup for one or many shipments with labels already purchased.
     * @param {Object} opts Optional parameters
     * @param {module:api/PickupsApi~scheduleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Pickup}
     */
    schedule(body, carrier_name, opts, callback) {
      opts = opts || {};
      let postBody = body;

      let pathParams = {
        'carrier_name': carrier_name
      };
      let queryParams = {
        'test': opts['test']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Pickup;

      return this.apiClient.callApi(
        '/pickups/{carrier_name}/schedule', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/PickupsApi~updateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationConfirmation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a pickup
     * Modify a pickup for one or many shipments with labels already purchased.
     * @param {module:api/PickupsApi~updateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationConfirmation}
     */
    update(body, id, callback) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = OperationConfirmation;

      return this.apiClient.callApi(
        '/pickups/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
