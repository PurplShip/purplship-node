/**
 * Purplship Open Source Multi-carrier Shipping API
 *  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services  The **proxy** endpoints are stateless and forwards calls to carriers web services. 
 *
 * OpenAPI spec version: v1-2021.0
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import CustomsData from '../model/CustomsData';
import ErrorResponse from '../model/ErrorResponse';
import OperationResponse from '../model/OperationResponse';
import ParcelData from '../model/ParcelData';
import Shipment from '../model/Shipment';
import ShipmentData from '../model/ShipmentData';
import ShipmentPurchaseData from '../model/ShipmentPurchaseData';

/**
* Shipments service.
* @module api/ShipmentsApi
* @version v1-2021.0
*/
export default class ShipmentsApi {

    /**
    * Constructs a new ShipmentsApi. 
    * @alias module:api/ShipmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addCustoms operation.
     * @callback module:api/ShipmentsApi~addCustomsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Shipment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add shipment customs declaration
     * Add the customs declaration for the shipment if non existent.
     * @param {module:api/ShipmentsApi~addCustomsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Shipment}
     */
    addCustoms(body, id, callback) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Shipment;

      return this.apiClient.callApi(
        '/shipments/{id}/customs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the addParcel operation.
     * @callback module:api/ShipmentsApi~addParcelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Shipment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a parcel to a shipment
     * Add a parcel to an existing shipment for a multi-parcel shipment.
     * @param {module:api/ShipmentsApi~addParcelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Shipment}
     */
    addParcel(body, id, callback) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Shipment;

      return this.apiClient.callApi(
        '/shipments/{id}/parcels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the cancel operation.
     * @callback module:api/ShipmentsApi~cancelCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a shipment
     * Void a shipment with the associated label.
     * @param {module:api/ShipmentsApi~cancelCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationResponse}
     */
    cancel(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationResponse;

      return this.apiClient.callApi(
        '/shipments/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the create operation.
     * @callback module:api/ShipmentsApi~createCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Shipment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a shipment
     * Create a new shipment instance.
     * @param {module:api/ShipmentsApi~createCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Shipment}
     */
    create(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Shipment;

      return this.apiClient.callApi(
        '/shipments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the list operation.
     * @callback module:api/ShipmentsApi~listCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Shipment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all shipments
     * Retrieve all shipments.
     * @param {Object} opts Optional parameters
     * @param {module:api/ShipmentsApi~listCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Shipment>}
     */
    list(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Shipment];

      return this.apiClient.callApi(
        '/shipments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the purchase operation.
     * @callback module:api/ShipmentsApi~purchaseCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Shipment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Buy a shipment label
     * Select your preferred rates to buy a shipment label.
     * @param {module:api/ShipmentsApi~purchaseCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Shipment}
     */
    purchase(body, id, callback) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Shipment;

      return this.apiClient.callApi(
        '/shipments/{id}/purchase', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the rates operation.
     * @callback module:api/ShipmentsApi~ratesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Shipment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fetch new shipment rates
     * Refresh the list of the shipment rates
     * @param {module:api/ShipmentsApi~ratesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Shipment}
     */
    rates(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Shipment;

      return this.apiClient.callApi(
        '/shipments/{id}/rates', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the retrieve operation.
     * @callback module:api/ShipmentsApi~retrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Shipment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a shipment
     * Retrieve a shipment.
     * @param {module:api/ShipmentsApi~retrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Shipment}
     */
    retrieve(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Shipment;

      return this.apiClient.callApi(
        '/shipments/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the setOptions operation.
     * @callback module:api/ShipmentsApi~setOptionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Shipment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add shipment options
     * Add one or many options to your shipment.&lt;br/&gt; **eg:**&lt;br/&gt; - add shipment **insurance** - specify the preferred transaction **currency** - setup a **cash collected on delivery** option  &#x60;&#x60;&#x60;json {     \&quot;insurance\&quot;: 120,     \&quot;currency\&quot;: \&quot;USD\&quot; } &#x60;&#x60;&#x60;  And many more, check additional options available in the [reference](#operation/all_references).
     * @param {module:api/ShipmentsApi~setOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Shipment}
     */
    setOptions(body, id, callback) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Shipment;

      return this.apiClient.callApi(
        '/shipments/{id}/options', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
