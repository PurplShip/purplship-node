/**
 * Purplship Open Source Multi-carrier Shipping API
 *  Purplship is an open source multi-carrier shipping API that simplifies the integration of logistic carrier services  The **proxy** endpoints are stateless and forwards calls to carriers web services. 
 *
 * OpenAPI spec version: v1-2021.0
 * Contact: hello@purplship.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import Operation from '../model/Operation';
import Parcel from '../model/Parcel';
import ParcelData from '../model/ParcelData';

/**
* Parcels service.
* @module api/ParcelsApi
* @version v1-2021.0
*/
export default class ParcelsApi {

    /**
    * Constructs a new ParcelsApi. 
    * @alias module:api/ParcelsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the create operation.
     * @callback module:api/ParcelsApi~createCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Parcel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a parcel
     * Create a new parcel.
     * @param {module:api/ParcelsApi~createCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Parcel}
     */
    create(body, callback) {
      let postBody = body;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Parcel;

      return this.apiClient.callApi(
        '/parcels', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the discard operation.
     * @callback module:api/ParcelsApi~discardCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Operation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a parcel
     * Remove a parcel.
     * @param {module:api/ParcelsApi~discardCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Operation}
     */
    discard(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Operation;

      return this.apiClient.callApi(
        '/parcels/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the list operation.
     * @callback module:api/ParcelsApi~listCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Parcel>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all parcels
     * Retrieve all stored parcels.
     * @param {Object} opts Optional parameters
     * @param {module:api/ParcelsApi~listCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Parcel>}
     */
    list(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Parcel];

      return this.apiClient.callApi(
        '/parcels', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the retrieve operation.
     * @callback module:api/ParcelsApi~retrieveCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Parcel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a parcel
     * Retrieve a parcel.
     * @param {module:api/ParcelsApi~retrieveCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Parcel}
     */
    retrieve(id, callback) {
      let postBody = null;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Parcel;

      return this.apiClient.callApi(
        '/parcels/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the update operation.
     * @callback module:api/ParcelsApi~updateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Parcel} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a parcel
     * modify an existing parcel&#x27;s details.
     * @param {module:api/ParcelsApi~updateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Parcel}
     */
    update(body, id, callback) {
      let postBody = body;

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Parcel;

      return this.apiClient.callApi(
        '/parcels/{id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}
